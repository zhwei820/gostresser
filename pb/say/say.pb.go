// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: say.proto

package say

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SayInput struct {
	Id                 string  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Method             string  `protobuf:"bytes,2,opt,name=Method,proto3" json:"Method,omitempty"`
	Name               string  `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	NumRequests        int32   `protobuf:"varint,4,opt,name=NumRequests,proto3" json:"NumRequests,omitempty"`
	NumFailures        int32   `protobuf:"varint,5,opt,name=NumFailures,proto3" json:"NumFailures,omitempty"`
	MedianResponseTime float64 `protobuf:"fixed64,6,opt,name=MedianResponseTime,proto3" json:"MedianResponseTime,omitempty"`
	AvgResponseTime    string  `protobuf:"bytes,7,opt,name=AvgResponseTime,proto3" json:"AvgResponseTime,omitempty"`
	MinResponseTime    float64 `protobuf:"fixed64,8,opt,name=MinResponseTime,proto3" json:"MinResponseTime,omitempty"`
	MaxResponseTime    float64 `protobuf:"fixed64,9,opt,name=MaxResponseTime,proto3" json:"MaxResponseTime,omitempty"`
	AvgContentLength   float64 `protobuf:"fixed64,10,opt,name=AvgContentLength,proto3" json:"AvgContentLength,omitempty"`
	CurrentRps         int32   `protobuf:"varint,11,opt,name=CurrentRps,proto3" json:"CurrentRps,omitempty"`
}

func (m *SayInput) Reset()         { *m = SayInput{} }
func (m *SayInput) String() string { return proto.CompactTextString(m) }
func (*SayInput) ProtoMessage()    {}
func (*SayInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_say_15e1030a12f3b249, []int{0}
}
func (m *SayInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SayInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SayInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SayInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayInput.Merge(dst, src)
}
func (m *SayInput) XXX_Size() int {
	return m.Size()
}
func (m *SayInput) XXX_DiscardUnknown() {
	xxx_messageInfo_SayInput.DiscardUnknown(m)
}

var xxx_messageInfo_SayInput proto.InternalMessageInfo

func (m *SayInput) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SayInput) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *SayInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SayInput) GetNumRequests() int32 {
	if m != nil {
		return m.NumRequests
	}
	return 0
}

func (m *SayInput) GetNumFailures() int32 {
	if m != nil {
		return m.NumFailures
	}
	return 0
}

func (m *SayInput) GetMedianResponseTime() float64 {
	if m != nil {
		return m.MedianResponseTime
	}
	return 0
}

func (m *SayInput) GetAvgResponseTime() string {
	if m != nil {
		return m.AvgResponseTime
	}
	return ""
}

func (m *SayInput) GetMinResponseTime() float64 {
	if m != nil {
		return m.MinResponseTime
	}
	return 0
}

func (m *SayInput) GetMaxResponseTime() float64 {
	if m != nil {
		return m.MaxResponseTime
	}
	return 0
}

func (m *SayInput) GetAvgContentLength() float64 {
	if m != nil {
		return m.AvgContentLength
	}
	return 0
}

func (m *SayInput) GetCurrentRps() int32 {
	if m != nil {
		return m.CurrentRps
	}
	return 0
}

type SayOutput struct {
	Code string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (m *SayOutput) Reset()         { *m = SayOutput{} }
func (m *SayOutput) String() string { return proto.CompactTextString(m) }
func (*SayOutput) ProtoMessage()    {}
func (*SayOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_say_15e1030a12f3b249, []int{1}
}
func (m *SayOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SayOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SayOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SayOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SayOutput.Merge(dst, src)
}
func (m *SayOutput) XXX_Size() int {
	return m.Size()
}
func (m *SayOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_SayOutput.DiscardUnknown(m)
}

var xxx_messageInfo_SayOutput proto.InternalMessageInfo

func (m *SayOutput) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *SayOutput) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*SayInput)(nil), "say.SayInput")
	proto.RegisterType((*SayOutput)(nil), "say.SayOutput")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SayServiceClient is the client API for SayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SayServiceClient interface {
	SayHello(ctx context.Context, in *SayInput, opts ...grpc.CallOption) (*SayOutput, error)
}

type sayServiceClient struct {
	cc *grpc.ClientConn
}

func NewSayServiceClient(cc *grpc.ClientConn) SayServiceClient {
	return &sayServiceClient{cc}
}

func (c *sayServiceClient) SayHello(ctx context.Context, in *SayInput, opts ...grpc.CallOption) (*SayOutput, error) {
	out := new(SayOutput)
	err := c.cc.Invoke(ctx, "/say.SayService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SayServiceServer is the server API for SayService service.
type SayServiceServer interface {
	SayHello(context.Context, *SayInput) (*SayOutput, error)
}

func RegisterSayServiceServer(s *grpc.Server, srv SayServiceServer) {
	s.RegisterService(&_SayService_serviceDesc, srv)
}

func _SayService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/say.SayService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayServiceServer).SayHello(ctx, req.(*SayInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _SayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "say.SayService",
	HandlerType: (*SayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _SayService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "say.proto",
}

func (m *SayInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SayInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSay(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Method) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSay(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSay(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.NumRequests != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSay(dAtA, i, uint64(m.NumRequests))
	}
	if m.NumFailures != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSay(dAtA, i, uint64(m.NumFailures))
	}
	if m.MedianResponseTime != 0 {
		dAtA[i] = 0x31
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MedianResponseTime))))
		i += 8
	}
	if len(m.AvgResponseTime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSay(dAtA, i, uint64(len(m.AvgResponseTime)))
		i += copy(dAtA[i:], m.AvgResponseTime)
	}
	if m.MinResponseTime != 0 {
		dAtA[i] = 0x41
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinResponseTime))))
		i += 8
	}
	if m.MaxResponseTime != 0 {
		dAtA[i] = 0x49
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxResponseTime))))
		i += 8
	}
	if m.AvgContentLength != 0 {
		dAtA[i] = 0x51
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AvgContentLength))))
		i += 8
	}
	if m.CurrentRps != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSay(dAtA, i, uint64(m.CurrentRps))
	}
	return i, nil
}

func (m *SayOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SayOutput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSay(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSay(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func encodeVarintSay(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SayInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSay(uint64(l))
	}
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovSay(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSay(uint64(l))
	}
	if m.NumRequests != 0 {
		n += 1 + sovSay(uint64(m.NumRequests))
	}
	if m.NumFailures != 0 {
		n += 1 + sovSay(uint64(m.NumFailures))
	}
	if m.MedianResponseTime != 0 {
		n += 9
	}
	l = len(m.AvgResponseTime)
	if l > 0 {
		n += 1 + l + sovSay(uint64(l))
	}
	if m.MinResponseTime != 0 {
		n += 9
	}
	if m.MaxResponseTime != 0 {
		n += 9
	}
	if m.AvgContentLength != 0 {
		n += 9
	}
	if m.CurrentRps != 0 {
		n += 1 + sovSay(uint64(m.CurrentRps))
	}
	return n
}

func (m *SayOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovSay(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSay(uint64(l))
	}
	return n
}

func sovSay(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSay(x uint64) (n int) {
	return sovSay(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SayInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SayInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SayInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRequests", wireType)
			}
			m.NumRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRequests |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFailures", wireType)
			}
			m.NumFailures = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumFailures |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedianResponseTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MedianResponseTime = float64(math.Float64frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgResponseTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvgResponseTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinResponseTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinResponseTime = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxResponseTime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxResponseTime = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgContentLength", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AvgContentLength = float64(math.Float64frombits(v))
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRps", wireType)
			}
			m.CurrentRps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentRps |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SayOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSay
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SayOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SayOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSay
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSay
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSay(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSay
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSay(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSay
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSay
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSay
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSay
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSay(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSay = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSay   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("say.proto", fileDescriptor_say_15e1030a12f3b249) }

var fileDescriptor_say_15e1030a12f3b249 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x6b, 0xe2, 0x40,
	0x14, 0xc7, 0x33, 0x46, 0x5d, 0xf3, 0x64, 0x5d, 0x79, 0x87, 0x65, 0xf0, 0x10, 0x82, 0xa7, 0xb0,
	0x0b, 0xc2, 0xee, 0x9e, 0xf6, 0x68, 0x85, 0xa2, 0xd0, 0x58, 0x48, 0xfa, 0x05, 0xa6, 0xcd, 0x23,
	0x06, 0x34, 0x49, 0x33, 0x13, 0x69, 0xee, 0xfd, 0x00, 0xfd, 0x58, 0x3d, 0x7a, 0xec, 0xb1, 0xe8,
	0x17, 0x29, 0x99, 0xc6, 0x62, 0x6c, 0x6f, 0xef, 0xfd, 0xe6, 0xc7, 0x9f, 0x19, 0xfe, 0x03, 0x96,
	0x14, 0xe5, 0x24, 0xcb, 0x53, 0x95, 0xa2, 0x29, 0x45, 0x39, 0x7e, 0x34, 0xa1, 0x17, 0x88, 0x72,
	0x91, 0x64, 0x85, 0xc2, 0x01, 0xb4, 0x16, 0x21, 0x67, 0x0e, 0x73, 0x2d, 0xbf, 0xb5, 0x08, 0xf1,
	0x27, 0x74, 0x3d, 0x52, 0xab, 0x34, 0xe4, 0x2d, 0xcd, 0xea, 0x0d, 0x11, 0xda, 0x4b, 0xb1, 0x21,
	0x6e, 0x6a, 0xaa, 0x67, 0x74, 0xa0, 0xbf, 0x2c, 0x36, 0x3e, 0xdd, 0x17, 0x24, 0x95, 0xe4, 0x6d,
	0x87, 0xb9, 0x1d, 0xff, 0x14, 0xd5, 0xc6, 0xa5, 0x88, 0xd7, 0x45, 0x4e, 0x92, 0x77, 0x3e, 0x8c,
	0x23, 0xc2, 0x09, 0xa0, 0x47, 0x61, 0x2c, 0x12, 0x9f, 0x64, 0x96, 0x26, 0x92, 0x6e, 0xe2, 0x0d,
	0xf1, 0xae, 0xc3, 0x5c, 0xe6, 0x7f, 0x71, 0x82, 0x2e, 0xfc, 0x98, 0x6e, 0xa3, 0x86, 0xfc, 0x4d,
	0x5f, 0xe9, 0x1c, 0x57, 0xa6, 0x17, 0x37, 0x63, 0x7b, 0x3a, 0xf6, 0x1c, 0x6b, 0x53, 0x3c, 0x34,
	0x4c, 0xab, 0x36, 0x9b, 0x18, 0x7f, 0xc1, 0x70, 0xba, 0x8d, 0x66, 0x69, 0xa2, 0x28, 0x51, 0x57,
	0x94, 0x44, 0x6a, 0xc5, 0x41, 0xab, 0x9f, 0x38, 0xda, 0x00, 0xb3, 0x22, 0xcf, 0x29, 0x51, 0x7e,
	0x26, 0x79, 0x5f, 0x3f, 0xfd, 0x84, 0x8c, 0xff, 0x80, 0x15, 0x88, 0xf2, 0xba, 0x50, 0x55, 0x0d,
	0x08, 0xed, 0x59, 0x1a, 0x52, 0x5d, 0x84, 0x9e, 0x71, 0x08, 0xa6, 0x27, 0xa3, 0xba, 0x87, 0x6a,
	0xfc, 0xfb, 0x1f, 0x20, 0x10, 0x65, 0x40, 0xf9, 0x36, 0xbe, 0x23, 0xfc, 0xad, 0x6b, 0x9c, 0xd3,
	0x7a, 0x9d, 0xe2, 0xf7, 0x49, 0x55, 0xf2, 0xb1, 0xd5, 0xd1, 0xe0, 0xb8, 0xbe, 0xc7, 0x8f, 0x8d,
	0x8b, 0xd1, 0xf3, 0xde, 0x66, 0xbb, 0xbd, 0xcd, 0x5e, 0xf7, 0x36, 0x7b, 0x3a, 0xd8, 0xc6, 0xee,
	0x60, 0x1b, 0x2f, 0x07, 0xdb, 0x98, 0xb3, 0xdb, 0xae, 0xfe, 0x1c, 0xff, 0xde, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x1e, 0x00, 0x90, 0x5f, 0x29, 0x02, 0x00, 0x00,
}
